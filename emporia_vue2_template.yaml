esphome:
  name: "emporia-vue2"

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended

# Enable Home Assistant API
api:
  encryption:
    key: "<API Key Goes Here>"

substitutions:
  # Panel Name
  panel_name: Main
  id_prefix: main

  # Assign which connector each phase is connected to (A, B, C)
  phase_a_port: A
  phase_b_port: B

  # Assign which color wire is connected to each phase (RED, BLACK)
  phase_a_color: RED
  phase_b_color: BLACK

  # Names for the individual circuits connected to the Emporia Vue 2
  circuit_1: circuit 1
  circuit_2: circuit 2
  circuit_3: circuit 3
  circuit_4: circuit 4
  circuit_5: circuit 5
  circuit_6: circuit 6
  circuit_7: circuit 7
  circuit_8: circuit 8
  circuit_9: circuit 9
  circuit_10: circuit 10
  circuit_11: circuit 11
  circuit_12: circuit 12
  circuit_13: circuit 13
  circuit_14: circuit 14
  circuit_15: circuit 15
  circuit_16: circuit 16

  # Phases for the individual circuits
  cir1_phase: phase_a
  cir2_phase: phase_b
  cir3_phase: phase_a
  cir4_phase: phase_b
  cir5_phase: phase_a
  cir6_phase: phase_b
  cir7_phase: phase_a
  cir8_phase: phase_b
  cir9_phase: phase_a
  cir10_phase: phase_b
  cir11_phase: phase_a
  cir12_phase: phase_b
  cir13_phase: phase_a
  cir14_phase: phase_b
  cir15_phase: phase_a
  cir16_phase: phase_b


ota:
  password: !secret ota_password	

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret fallback_ap
    password: !secret ap_password

external_components:
  - source: github://emporia-vue-local/esphome@dev
    components: [ emporia_vue ]

preferences:
  # the default of 1min is far too short--flash chip is rated
  # for approx 100k writes.
  flash_write_interval: "48h"
i2c:
  sda: 21
  scl: 22
  scan: false
  frequency: 200kHz  # recommended range is 50-200kHz
  id: i2c_a
time:
  - platform: sntp
    id: my_time

# these are called references in YAML. They allow you to reuse
# this configuration in each sensor, while only defining it once
.defaultfilters:
  - &moving_avg
    # we capture a new sample every 0.24 seconds, so the time can
    # be calculated from the number of samples as n * 0.24.
    sliding_window_moving_average:
      # we average over the past 2.88 seconds
      window_size: 12
      # we push a new value every 1.44 seconds
      send_every: 6
  - &invert
    # invert and filter out any values below 0.
    lambda: 'return max(-x, 0.0f);'
  - &pos
    # filter out any values below 0.
    lambda: 'return max(x, 0.0f);'
  - &abs
    # take the absolute value of the value
    lambda: 'return abs(x);'

sensor:
  - platform: emporia_vue
    i2c_id: i2c_a
    phases:
      - id: phase_a  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: "${phase_a_color}"  # Vue device wire color
        calibration: 0.022  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: "${panel_name} Phase A Voltage"
          filters: [ *moving_avg, *pos ]
      - id: phase_b  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: "${phase_b_color}"  # Vue device wire color
        calibration: 0.022  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula <in-use calibration value> * <accurate voltage> / <reporting voltage>
        voltage:
          name: "${panel_name} Phase B Voltage"
          filters: [ *moving_avg, *pos ]
    ct_clamps:
      - phase_id: phase_a
        input: "${phase_a_port}"  # Verify the CT going to this device input also matches the phase/leg
        power:
          name: "${panel_name} Phase A Power"
          id: "${id_prefix}_phase_a_power"
          device_class: power
          filters: [  ]
      - phase_id: phase_b
        input: "${phase_b_port}"  # Verify the CT going to this device input also matches the phase/leg
        power:
          name: "${panel_name} Phase B Power"
          id: "${id_prefix}_phase_b_power"
          device_class: power
          filters: [  ]
          
      # Pay close attention to set the phase_id for each breaker by matching it to the phase/leg it connects to in the panel
      - { phase_id: "${cir1_phase}", input:  "1", power: { name:  "${circuit_1}", id:  cir1, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir2_phase}", input:  "2", power: { name:  "${circuit_2}", id:  cir2, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir3_phase}", input:  "3", power: { name:  "${circuit_3}", id:  cir3, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir4_phase}", input:  "4", power: { name:  "${circuit_4}", id:  cir4, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir5_phase}", input:  "5", power: { name:  "${circuit_5}", id:  cir5, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir6_phase}", input:  "6", power: { name:  "${circuit_6}", id:  cir6, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir7_phase}", input:  "7", power: { name:  "${circuit_7}", id:  cir7, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir8_phase}", input:  "8", power: { name:  "${circuit_8}", id:  cir8, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir9_phase}", input:  "9", power: { name:  "${circuit_9}", id:  cir9, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir10_phase}", input: "10", power: { name: "${circuit_10}", id: cir10, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir11_phase}", input: "11", power: { name: "${circuit_11}", id: cir11, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir12_phase}", input: "12", power: { name: "${circuit_12}", id: cir12, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir13_phase}", input: "13", power: { name: "${circuit_13}", id: cir13, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir14_phase}", input: "14", power: { name: "${circuit_14}", id: cir14, filters: [ *moving_avg, *pos  ] } }
      - { phase_id: "${cir15_phase}", input: "15", power: { name: "${circuit_15}", id: cir15, filters: [ *moving_avg, *pos, multiply: 2 ] } }
      - { phase_id: "${cir16_phase}", input: "16", power: { name: "${circuit_16}", id: cir16, filters: [ *moving_avg, *pos, multiply: 2 ] } }
  - platform: template
    name: "${panel_name} Total Power"
    lambda: return id(${id_prefix}_phase_a_power).state + id(${id_prefix}_phase_b_power).state;
    update_interval: 1s
    id: "${id_prefix}_total_power"
    unit_of_measurement: "W"
  - platform: total_daily_energy
    name: "Total ${panel_name} Daily Energy"
    power_id: "${id_prefix}_total_power"
    accuracy_decimals: 0
  - { power_id:  cir1, platform: total_daily_energy, accuracy_decimals: 0, name:  "${circuit_1} Daily Energy" }
  - { power_id:  cir2, platform: total_daily_energy, accuracy_decimals: 0, name:  "${circuit_2} Daily Energy" }
  - { power_id:  cir3, platform: total_daily_energy, accuracy_decimals: 0, name:  "${circuit_3} Daily Energy" }
  - { power_id:  cir4, platform: total_daily_energy, accuracy_decimals: 0, name:  "${circuit_4} Daily Energy" }
  - { power_id:  cir5, platform: total_daily_energy, accuracy_decimals: 0, name:  "${circuit_5} Daily Energy" }
  - { power_id:  cir6, platform: total_daily_energy, accuracy_decimals: 0, name:  "${circuit_6} Daily Energy" }
  - { power_id:  cir7, platform: total_daily_energy, accuracy_decimals: 0, name:  "${circuit_7} Daily Energy" }
  - { power_id:  cir8, platform: total_daily_energy, accuracy_decimals: 0, name:  "${circuit_8} Daily Energy" }
  - { power_id:  cir9, platform: total_daily_energy, accuracy_decimals: 0, name:  "${circuit_9} Daily Energy" }
  - { power_id: cir10, platform: total_daily_energy, accuracy_decimals: 0, name: "${circuit_10} Daily Energy" }
  - { power_id: cir11, platform: total_daily_energy, accuracy_decimals: 0, name: "${circuit_11} Daily Energy" }
  - { power_id: cir12, platform: total_daily_energy, accuracy_decimals: 0, name: "${circuit_12} Daily Energy" }
  - { power_id: cir13, platform: total_daily_energy, accuracy_decimals: 0, name: "${circuit_13} Daily Energy" }
  - { power_id: cir14, platform: total_daily_energy, accuracy_decimals: 0, name: "${circuit_14} Daily Energy" }
  - { power_id: cir15, platform: total_daily_energy, accuracy_decimals: 0, name: "${circuit_15} Daily Energy" }
  - { power_id: cir16, platform: total_daily_energy, accuracy_decimals: 0, name: "${circuit_16} Daily Energy" }
